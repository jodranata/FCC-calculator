{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["KeypadButton","handleInputNum","id","sign","map","num","key","value","type","onClick","className","OperatorButton","handleInputOp","ops","App","useState","prevNum","setPrevNum","currNum","setCurrNum","operator","setOperator","isDecimal","setIsDecimal","opClicked","setOpClicked","hasEval","setHasEval","error","setError","handleEval","totalNum","first","Number","sec","console","log","e","target","findIndex","op","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.43564216.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './App.css';\n\nconst KeypadButton = ({ handleInputNum }) =>\n  [\n    {\n      id: 'nine',\n      sign: '9',\n    },\n    {\n      id: 'eight',\n      sign: '8',\n    },\n    {\n      id: 'seven',\n      sign: '7',\n    },\n    {\n      id: 'six',\n      sign: '6',\n    },\n    {\n      id: 'five',\n      sign: '5',\n    },\n    {\n      id: 'four',\n      sign: '4',\n    },\n    {\n      id: 'three',\n      sign: '3',\n    },\n    {\n      id: 'two',\n      sign: '2',\n    },\n    {\n      id: 'one',\n      sign: '1',\n    },\n    {\n      id: 'zero',\n      sign: '0',\n    },\n    {\n      id: 'decimal',\n      sign: '.',\n    },\n  ].map(num => {\n    const { id, sign } = num;\n    return (\n      <>\n        <button\n          id={id}\n          key={id}\n          value={sign}\n          type=\"button\"\n          onClick={handleInputNum}\n          className=\"number\"\n        >\n          {sign}\n        </button>\n      </>\n    );\n  });\n\nconst OperatorButton = ({ handleInputOp }) =>\n  [\n    {\n      id: 'add',\n      sign: '+',\n    },\n    {\n      id: 'subtract',\n      sign: '-',\n    },\n    {\n      id: 'multiply',\n      sign: 'x',\n    },\n    {\n      id: 'divide',\n      sign: '/',\n    },\n    {\n      id: 'equals',\n      sign: '=',\n    },\n  ].map(ops => {\n    const { id, sign } = ops;\n    return (\n      <button\n        id={id}\n        key={id}\n        value={sign}\n        type=\"button\"\n        onClick={handleInputOp}\n        className=\"operator\"\n      >\n        {sign}\n      </button>\n    );\n  });\n\nfunction App() {\n  const [prevNum, setPrevNum] = useState(null);\n  const [currNum, setCurrNum] = useState('0');\n  const [operator, setOperator] = useState('');\n  const [isDecimal, setIsDecimal] = useState(false);\n  const [opClicked, setOpClicked] = useState(false);\n  const [hasEval, setHasEval] = useState(false);\n  const [error, setError] = useState(false);\n\n  const handleEval = () => {\n    if (!prevNum) return;\n    const first = Number(prevNum);\n    const sec = Number(currNum);\n    let totalNum;\n    switch (operator) {\n      case '+':\n        totalNum = first + sec;\n        break;\n      case '-':\n        totalNum = first - sec;\n        break;\n      case 'x':\n        totalNum = first * sec;\n        break;\n      case '/':\n        totalNum = first / sec;\n        break;\n      default:\n        console.log('error');\n    }\n    setPrevNum(totalNum);\n    setCurrNum('0');\n    setIsDecimal(false);\n    setHasEval(true);\n  };\n\n  const handleInputNum = e => {\n    if (currNum.length > 10) {\n      setError(true);\n      setCurrNum('REACHED LIMITED NUMBER');\n    }\n    if (error) return;\n    const { value } = e.target;\n    if (value === '.') {\n      if (isDecimal) return;\n      setCurrNum(currNum + value);\n      setIsDecimal(true);\n    } else if (currNum === '0' || hasEval) {\n      setCurrNum(value);\n    } else {\n      setCurrNum(currNum + value);\n    }\n    setHasEval(false);\n    setOpClicked(false);\n  };\n\n  const handleInputOp = e => {\n    const { value } = e.target;\n    setIsDecimal(false);\n    const isMathOp = ['+', '-', 'x', '/'].findIndex(op => op === value) !== -1;\n    if (isMathOp) {\n      if (opClicked) {\n        return setOperator(value);\n      }\n      setOpClicked(true);\n      if (prevNum === null) {\n        setPrevNum(currNum);\n        setCurrNum('0');\n        return setOperator(value);\n      }\n      handleEval();\n      return setOperator(value);\n    }\n    if (value === '=') {\n      return handleEval();\n    }\n  };\n\n  const handleReset = () => {\n    setPrevNum(null);\n    setCurrNum('0');\n    setOperator('');\n    setIsDecimal(false);\n    setOpClicked(false);\n    setHasEval(false);\n    setError(false);\n  };\n  return (\n    <div className=\"calculator-app\">\n      <div className=\"display\" id=\"display\">\n        {hasEval ? prevNum : currNum}\n      </div>\n      <div className=\"keypad-buttons\">\n        <div className=\"operator-buttons\">\n          <button\n            type=\"button\"\n            onClick={handleReset}\n            id=\"clear\"\n            className=\"clear\"\n          >\n            AC\n          </button>\n          <OperatorButton handleInputOp={handleInputOp} />\n        </div>\n        <div className=\"number-buttons\">\n          <KeypadButton handleInputNum={handleInputNum} />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\n// if (value === '-' && !isNeg) {\n//   setIsNeg(true);\n//   return setCurrNum(value + currNum);\n// }\n// if (value === '-' && isNeg) {\n//   const newNum = [...currNum].filter(elem => elem !== '-').join('');\n//   setIsNeg(false);\n//   return setCurrNum(newNum);\n// }\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}